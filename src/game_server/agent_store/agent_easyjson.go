// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package agent_store

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonCb9d4455DecodeGameServerAgentStore(in *jlexer.Lexer, out *AgentList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "agents":
			if in.IsNull() {
				in.Skip()
				out.Agents = nil
			} else {
				in.Delim('[')
				if out.Agents == nil {
					if !in.IsDelim(']') {
						out.Agents = make([]Agent, 0, 1)
					} else {
						out.Agents = []Agent{}
					}
				} else {
					out.Agents = (out.Agents)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Agent
					(v1).UnmarshalEasyJSON(in)
					out.Agents = append(out.Agents, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCb9d4455EncodeGameServerAgentStore(out *jwriter.Writer, in AgentList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"agents\":"
		out.RawString(prefix[1:])
		if in.Agents == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Agents {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AgentList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCb9d4455EncodeGameServerAgentStore(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AgentList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCb9d4455EncodeGameServerAgentStore(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AgentList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCb9d4455DecodeGameServerAgentStore(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AgentList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCb9d4455DecodeGameServerAgentStore(l, v)
}
func easyjsonCb9d4455DecodeGameServerAgentStore1(in *jlexer.Lexer, out *Agent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "X":
			out.X = float64(in.Float64())
		case "Y":
			out.Y = float64(in.Float64())
		case "Z":
			out.Z = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCb9d4455EncodeGameServerAgentStore1(out *jwriter.Writer, in Agent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"X\":"
		out.RawString(prefix)
		out.Float64(float64(in.X))
	}
	{
		const prefix string = ",\"Y\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y))
	}
	{
		const prefix string = ",\"Z\":"
		out.RawString(prefix)
		out.Float64(float64(in.Z))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Agent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCb9d4455EncodeGameServerAgentStore1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Agent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCb9d4455EncodeGameServerAgentStore1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Agent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCb9d4455DecodeGameServerAgentStore1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Agent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCb9d4455DecodeGameServerAgentStore1(l, v)
}
